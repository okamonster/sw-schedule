// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

// 一般ユーザー
model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String? // パスワード認証用
  // 有料プラン関連
  planType      String    @default("free") @map("plan_type") // free, light, standard, premium
  planExpiresAt DateTime? @map("plan_expires_at") // プラン有効期限
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  profile          UserProfile?
  // 推しているアーティストとの関係
  followingArtists UserArtistFollow[]
  // プラン関連
  planHistory      UserPlanHistory[]
  payments         UserPayment[]

  @@map("users")
}

model DeletedUser {
  id        String   @id @default(cuid())
  email     String
  password  String? // パスワード認証用
  deletedAt DateTime @default(now()) @map("deleted_at")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("deleted_users")
}

model UserProfile {
  id                 String   @id @default(uuid())
  userId             String   @unique @map("user_id")
  user               User     @relation(fields: [userId], references: [id])
  userName           String   @map("user_name")
  userImageUrl       String?  @map("user_image_url")
  userDescription    String?  @map("user_description")
  mainActivityRegion String   @map("main_activity_region")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

// アーティスト（出演者）
model Artist {
  id                String             @id @default(uuid())
  artistName        String             @map("artist_name")
  artistImageUrl    String             @default("") @map("artist_image_url")
  artistDescription String?            @map("artist_description")
  genre             String // ジャンル（アイドル、ロック、ポップスなど）
  ogpImageUrl       String             @default("") @map("ogp_image_url")
  region            String // 活動地域（東京、大阪、愛知など）
  twitterId         String?            @map("twitter_id")
  instagramId       String?            @map("instagram_id")
  youtubeUrl        String?            @map("youtube_url")
  createdAt         DateTime           @default(now())
  updatedAt         DateTime           @updatedAt
  // アーティスト本人のアカウント
  artistUser        ArtistUser?
  // 推しファンとの関係
  followers         UserArtistFollow[]
  // 出演イベントとの関係
  events            ArtistEvent[]

  @@map("artists")
}

// アーティスト本人のアカウント
model ArtistUser {
  id        String   @id @default(uuid())
  email     String   @unique
  password  String
  artistId  String   @unique @map("artist_id")
  artist    Artist   @relation(fields: [artistId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("artist_users")
}

// イベント
model Event {
  id                    String        @id @default(uuid())
  eventName             String        @map("event_name")
  eventDescription      String        @map("event_description")
  eventImageUrl         String        @default("") @map("event_image_url")
  eventDate             DateTime      @map("event_date")
  ogpImageUrl           String        @default("") @map("ogp_image_url")
  openDateTime          DateTime      @map("open_date_time")
  startDateTime         DateTime      @map("start_date_time")
  locatePrefecture      String        @map("locate_prefecture")
  eventLocationName     String        @map("event_location_name")
  eventLocationAddress  String        @map("event_location_address")
  ticketReleaseDateTime DateTime?     @map("ticket_release_date_time")
  ticketPrice           Int           @map("ticket_price")
  sameDayTicketPrice    Int           @map("same_day_ticket_price")
  ticketUrl             String        @map("ticket_url")
  isNeedDrink           Boolean       @map("is_need_drink")
  drinkOption           String        @default("") @map("drink_option")
  createdAt             DateTime      @default(now())
  updatedAt             DateTime      @updatedAt
  // 出演アーティストとの関係
  artists               ArtistEvent[]

  @@map("events")
}

// User-Artist間の推し関係（多対多）
model UserArtistFollow {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  artistId  String   @map("artist_id")
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)

  @@unique([userId, artistId])
  @@map("user_artist_follows")
}

// Artist-Event間の出演関係（多対多）
model ArtistEvent {
  id        String   @id @default(uuid())
  artistId  String   @map("artist_id")
  eventId   String   @map("event_id")
  createdAt DateTime @default(now())
  artist    Artist   @relation(fields: [artistId], references: [id], onDelete: Cascade)
  event     Event    @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([artistId, eventId])
  @@map("artist_events")
}

// プラン変更履歴
model UserPlanHistory {
  id        String   @id @default(uuid())
  userId    String   @map("user_id")
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  planType  String   @map("plan_type") // free,light, standard, premium
  changedAt DateTime @default(now()) @map("changed_at")
  reason    String? // 変更理由（アップグレード、ダウングレード、期限切れなど）

  @@map("user_plan_histories")
}

// 支払い情報（将来的な実装）
model UserPayment {
  id            String    @id @default(uuid())
  userId        String    @map("user_id")
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  amount        Int // 支払い金額（円）
  currency      String    @default("JPY")
  paymentMethod String    @map("payment_method") // credit_card, bank_transfer, etc.
  status        String // pending, completed, failed, refunded
  paidAt        DateTime? @map("paid_at")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("user_payments")
}
